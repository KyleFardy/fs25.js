{"version":3,"file":"ServerUtils.js","sourceRoot":"","sources":["../../src/util/ServerUtils.ts"],"names":[],"mappings":";;AAEA,4CAAwC;AAExC,MAAqB,WAAW;IACvB,MAAM,CAAC,KAAK,CACjB,OAAmB,EACnB,KAAa,EACb,MAA2B;QAE3B,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,oBAAQ,CAAC,KAAK,EAAE,EAAE,KAAK,EAAE,MAAM,EAAE,CAAC,CAAC;IACzD,CAAC;IAEM,MAAM,CAAC,KAAK,CAAC,QAAQ,CAC1B,OAAmB,EACnB,MAA0B,EAC1B,KAAc;QAEd,IAAI,KAAK,EAAE,CAAC;YACV,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAC7B,CAAC;aAAM,CAAC;YACN,MAAM,CAAC,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,KAAK,OAAO,CAAC,CAAC;QACjE,CAAC;QAED,MAAM,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QAExB,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QAC/B,MAAM,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;QACzD,OAAO,CAAC,MAAM,CAAC,IAAI,CACjB,IAAI,MAAM,CAAC,UAAU,YAAY,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,SAAS,EAAE,CAC/D,CAAC;QAEF,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,oBAAQ,CAAC,WAAW,EAAE,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC,CAAC;IAC/D,CAAC;IAEO,MAAM,CAAC,KAAK,CAAC,EAAU;QAC7B,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC,CAAC;IAC3D,CAAC;CACF;AAlCD,8BAkCC","sourcesContent":["import type { FarmingSim25Server } from '../servers/interfaces';\r\nimport type RCEManager from '../Manager';\r\nimport { RCEEvent } from '../constants';\r\n\r\nexport default class ServerUtils {\r\n  public static error(\r\n    manager: RCEManager,\r\n    error: string,\r\n    server?: FarmingSim25Server\r\n  ) {\r\n    manager.events.emit(RCEEvent.Error, { error, server });\r\n  }\r\n\r\n  public static async setReady(\r\n    manager: RCEManager,\r\n    server: FarmingSim25Server,\r\n    ready: boolean\r\n  ) {\r\n    if (ready) {\r\n      server.flags.push('READY');\r\n    } else {\r\n      server.flags = server.flags.filter((flag) => flag !== 'READY');\r\n    }\r\n\r\n    await this.sleep(3_000);\r\n\r\n    manager.servers.update(server);\r\n    await manager.servers.command(server.identifier, 'save');\r\n    manager.logger.info(\r\n      `[${server.identifier}] Server ${ready ? 'Ready' : 'Unready'}`\r\n    );\r\n\r\n    manager.events.emit(RCEEvent.ServerReady, { server, ready });\r\n  }\r\n\r\n  private static sleep(ms: number) {\r\n    return new Promise((resolve) => setTimeout(resolve, ms));\r\n  }\r\n}\r\n"]}