{"version":3,"file":"Socket.js","sourceRoot":"","sources":["../../src/socket/Socket.ts"],"names":[],"mappings":"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","sourcesContent":["import { WebSocket } from 'ws';\r\nimport type GPortalAuth from '../auth/Auth';\r\nimport { GPortalRoutes, RCEIntent, RegularExpressions } from '../constants';\r\nimport type { FarmingSim25Server } from '../servers/interfaces';\r\nimport type { WSMessage, WSRequest } from './interfaces';\r\nimport type RCEManager from '../Manager';\r\nimport ServiceStateHandler from './ServiceState';\r\nimport ConsoleMessagesHandler from './ConsoleMessages';\r\nimport ServiceSensorHandler from './ServiceSensors';\r\nimport ServerUtils from '../util/ServerUtils';\r\n\r\nexport default class GPortalSocket {\r\n  private _manager: RCEManager;\r\n  private _auth: GPortalAuth;\r\n  private _socket: WebSocket;\r\n  private _connectionAttempts: number = 0;\r\n  private _heartbeatInterval: NodeJS.Timeout;\r\n  private _requests: Map<string, WSRequest> = new Map();\r\n\r\n  public constructor(manager: RCEManager, auth: GPortalAuth) {\r\n    this._manager = manager;\r\n    this._auth = auth;\r\n  }\r\n\r\n  public close() {\r\n    this._manager.logger.debug('Closing WebSocket Connection');\r\n\r\n    if (this._socket) {\r\n      this._socket.removeAllListeners();\r\n      this._socket.close();\r\n    }\r\n\r\n    if (this._heartbeatInterval) {\r\n      clearInterval(this._heartbeatInterval);\r\n    }\r\n\r\n    this._requests.clear();\r\n    this._socket = null;\r\n\r\n    this._manager.logger.debug('WebSocket Connection Closed');\r\n  }\r\n\r\n  public connect(resubsctibe: boolean = false) {\r\n    this._manager.logger.debug('Connecting to WebSocket Server');\r\n\r\n    this._connectionAttempts++;\r\n    this._socket = new WebSocket(GPortalRoutes.WS, ['graphql-ws'], {\r\n      headers: {\r\n        origin: GPortalRoutes.Origin,\r\n        host: 'www.g-portal.com',\r\n      },\r\n      timeout: 60_000,\r\n    });\r\n\r\n    this._socket.on('open', () => {\r\n      this._manager.logger.debug('WebSocket Connection Established');\r\n\r\n      this._connectionAttempts = 0;\r\n      this.authenticate(resubsctibe);\r\n\r\n      this._heartbeatInterval = setInterval(() => {\r\n        if (this._socket?.OPEN) {\r\n          this._manager.logger.debug('Sending WebSocket Heartbeat');\r\n          this._socket.send(JSON.stringify({ type: 'ka' }));\r\n        }\r\n      }, 30_000);\r\n    });\r\n\r\n    this._socket.on('close', (code: number, reason: string) => {\r\n      this._manager.logger.debug(\r\n        `WebSocket Connection Closed: ${code} - ${reason}`\r\n      );\r\n\r\n      this.close();\r\n\r\n      if (code !== 1000) {\r\n        if (this._connectionAttempts < 5) {\r\n          this._manager.logger.warn(\r\n            `WebSocket Connection Closed - Reconnecting in 10 Seconds (Attempt ${\r\n              this._connectionAttempts + 1\r\n            })`\r\n          );\r\n\r\n          setTimeout(\r\n            () => this.connect(true),\r\n            (this._connectionAttempts + 1) * 10_000\r\n          );\r\n        } else {\r\n          throw new Error(\r\n            'Failed to reconnect to the WS server after 5 attempts'\r\n          );\r\n        }\r\n      } else {\r\n        throw new Error(`WS connection closed (${code}): ${reason}`);\r\n      }\r\n    });\r\n\r\n    this._socket.on('message', (message) => {\r\n      try {\r\n        const data: WSMessage = JSON.parse(message.toString());\r\n\r\n        this._manager.logger.debug(\r\n          `WebSocket Message Received: ${JSON.stringify(data)}`\r\n        );\r\n\r\n        if (data.type === 'ka') return;\r\n\r\n        if (data.type === 'error') {\r\n          return ServerUtils.error(\r\n            this._manager,\r\n            `WebSocket Error: ${data.payload?.message}`\r\n          );\r\n        }\r\n\r\n        if (data.type === 'connection_ack') {\r\n          return this._manager.logger.info('RCE.JS - Authenticated');\r\n        }\r\n\r\n        if (data.type === 'data') {\r\n          const request = this._requests.get(data.id);\r\n          if (!request) {\r\n            return ServerUtils.error(\r\n              this._manager,\r\n              `Unknown Request ID: ${data.id}`\r\n            );\r\n          }\r\n\r\n          const server = this._manager.servers.get(request.identifier);\r\n          if (!server) {\r\n            return ServerUtils.error(\r\n              this._manager,\r\n              `[${server.identifier}] Unknown Server ID`\r\n            );\r\n          }\r\n\r\n          if (data.payload?.errors?.length) {\r\n            const error: string = data.payload.errors[0].message;\r\n            const match = error.match(RegularExpressions.AIO_RPC_Error);\r\n            if (match) {\r\n              const status = match[1].trim();\r\n              if (status === 'StatusCode.UNAVAILABLE') {\r\n                this._manager.logger.warn(\r\n                  `[${server.identifier}] AioRpcError: Server Is Unavailable, Recreating in 2 Minutes...`\r\n                );\r\n\r\n                this._manager.servers.remove(server);\r\n                setTimeout(\r\n                  () =>\r\n                    this._manager.servers.add({\r\n                      identifier: server.identifier,\r\n                      region: server.region,\r\n                      serverId: server.serverId,\r\n                      state: server.state,\r\n                      extendedEventRefreshing:\r\n                        server.intervals.extendedEventRefreshing.enabled,\r\n                      playerRefreshing:\r\n                        server.intervals.playerRefreshing.enabled,\r\n                      radioRefreshing: server.intervals.radioRefreshing.enabled,\r\n                      intents: server.intents,\r\n                    }),\r\n                  120_000\r\n                );\r\n              }\r\n\r\n              return;\r\n            }\r\n\r\n            return ServerUtils.error(this._manager, `Error: ${error}`, server);\r\n          }\r\n\r\n          if (data.payload?.data?.serviceState) {\r\n            ServiceStateHandler.handle(this._manager, data, server);\r\n          } else if (data.payload?.data?.consoleMessages) {\r\n            ConsoleMessagesHandler.handle(this._manager, data, server);\r\n          } else if (data.payload?.data?.serviceSensors) {\r\n            ServiceSensorHandler.handle(this._manager, data, server);\r\n          }\r\n        }\r\n      } catch (error) {}\r\n    });\r\n  }\r\n\r\n  public removeServer(server: FarmingSim25Server) {\r\n    this._manager.logger.debug(\r\n      `[${server.identifier}] Removing WebSocket Subscription`\r\n    );\r\n\r\n    if (this._socket?.OPEN) {\r\n      this._socket.send(\r\n        JSON.stringify({\r\n          type: 'stop',\r\n          id: server.identifier,\r\n        })\r\n      );\r\n    }\r\n\r\n    this._requests.delete(server.identifier);\r\n\r\n    this._manager.logger.debug(\r\n      `[${server.identifier}] WebSocket Subscription Removed`\r\n    );\r\n  }\r\n\r\n  public addServer(server: FarmingSim25Server) {\r\n    this._manager.logger.debug(\r\n      `[${server.identifier}] Adding WebSocket Subscription`\r\n    );\r\n\r\n    if (this._socket?.OPEN) {\r\n      if (\r\n        server.intents.includes(RCEIntent.All) ||\r\n        server.intents.includes(RCEIntent.ConsoleMessages)\r\n      ) {\r\n        this._socket.send(\r\n          JSON.stringify({\r\n            type: 'start',\r\n            payload: {\r\n              variables: {\r\n                sid: server.serverId[1],\r\n                region: server.region,\r\n              },\r\n              extensions: {},\r\n              operationName: 'consoleMessages',\r\n              query: `subscription consoleMessages($sid: Int!, $region: REGION!) {\r\n              consoleMessages(rsid: {id: $sid, region: $region}) {\r\n                stream\r\n                message\r\n                __typename\r\n              }\r\n            }`,\r\n            },\r\n            id: server.identifier,\r\n          })\r\n        );\r\n\r\n        this._manager.logger.debug(\r\n          `[${server.identifier}] Subscribed to Console Messages`\r\n        );\r\n      }\r\n\r\n      if (\r\n        server.intents.includes(RCEIntent.All) ||\r\n        server.intents.includes(RCEIntent.ServiceState)\r\n      ) {\r\n        this._socket.send(\r\n          JSON.stringify({\r\n            type: 'start',\r\n            payload: {\r\n              variables: {\r\n                sid: server.serverId[1],\r\n                region: server.region,\r\n              },\r\n              extensions: {},\r\n              operationName: 'serviceState',\r\n              query:\r\n                'subscription serviceState($sid: Int!, $region: REGION!) {\\n  serviceState(rsid: {id: $sid, region: $region}) {\\n    ...ServiceStateFields\\n    __typename\\n  }\\n}\\n\\nfragment ServiceStateFields on ServiceState {\\n  state\\n  fsmState\\n  fsmIsTransitioning\\n  fsmIsExclusiveLocked\\n  fsmFileAccess\\n  fsmLastStateChange\\n  fsmStateLiveProgress {\\n    ... on InstallProgress {\\n      action\\n      percentage\\n      __typename\\n    }\\n    ... on BroadcastProgress {\\n      nextMessageAt\\n      stateExitAt\\n      __typename\\n    }\\n    __typename\\n  }\\n  __typename\\n}',\r\n            },\r\n            id: server.identifier,\r\n          })\r\n        );\r\n\r\n        this._manager.logger.debug(\r\n          `[${server.identifier}] Subscribed to Service State`\r\n        );\r\n      }\r\n\r\n      if (\r\n        server.intents.includes(RCEIntent.All) ||\r\n        server.intents.includes(RCEIntent.ServiceSensors)\r\n      ) {\r\n        this._socket.send(\r\n          JSON.stringify({\r\n            type: 'start',\r\n            payload: {\r\n              variables: {\r\n                sid: server.serverId[1],\r\n                region: server.region,\r\n              },\r\n              extensions: {},\r\n              operationName: 'serviceSensors',\r\n              query:\r\n                'subscription serviceSensors($sid: Int!, $region: REGION!) {\\n  serviceSensors(rsid: {id: $sid, region: $region}) {\\n    cpuTotal\\n    memory {\\n      used\\n      __typename\\n    }\\n    __typename\\n  }\\n}',\r\n            },\r\n            id: server.identifier,\r\n          })\r\n        );\r\n\r\n        this._manager.logger.debug(\r\n          `[${server.identifier}] Subscribed to Service Sensors`\r\n        );\r\n      }\r\n\r\n      this._requests.set(server.identifier, {\r\n        sid: server.serverId[1],\r\n        region: server.region,\r\n        identifier: server.identifier,\r\n      });\r\n\r\n      this._manager.logger.debug(\r\n        `[${server.identifier}] WebSocket Subscription Added`\r\n      );\r\n    }\r\n  }\r\n\r\n  private authenticate(resubsctibe: boolean) {\r\n    const token = this._auth.accessToken;\r\n    if (!token) {\r\n      throw new Error('No access token available');\r\n    }\r\n\r\n    this._manager.logger.debug('Authenticating WebSocket Connection');\r\n\r\n    if (this._socket.OPEN) {\r\n      this._socket.send(\r\n        JSON.stringify({\r\n          type: 'connection_init',\r\n          payload: {\r\n            authorization: token,\r\n          },\r\n        })\r\n      );\r\n\r\n      if (resubsctibe) {\r\n        this._manager.servers\r\n          .getAll()\r\n          .forEach((server) => this.addServer(server));\r\n      }\r\n    } else {\r\n      throw new Error('Socket is not open');\r\n    }\r\n  }\r\n}\r\n"]}