{"version":3,"file":"Manager.js","sourceRoot":"","sources":["../src/Manager.ts"],"names":[],"mappings":"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","sourcesContent":["import GPortalAuth from \"./auth/Auth\";\r\nimport GPortalSocket from \"./socket/Socket\";\r\nimport ServerManager from \"./servers/Servers\";\r\nimport RCELogger from \"./logger/Logger\";\r\nimport type { AuthOptions, LoggerOptions, RCEEventTypes } from \"./interfaces\";\r\nimport { EventEmitter } from \"events\";\r\nimport { ILogger } from \"./logger/interfaces\";\r\nimport CommandHandler from \"./servers/CommandHandler\";\r\nimport { RCEEvent } from \"./constants\";\r\n\r\nclass RCEEventManager extends EventEmitter {\r\n  emit<K extends keyof RCEEventTypes>(\r\n    event: K,\r\n    ...args: RCEEventTypes[K] extends undefined ? [] : [RCEEventTypes[K]]\r\n  ): boolean {\r\n    return super.emit(event, ...args);\r\n  }\r\n\r\n  on<K extends keyof RCEEventTypes>(\r\n    event: K,\r\n    listener: (arg: RCEEventTypes[K]) => void\r\n  ): this {\r\n    return super.on(event, listener);\r\n  }\r\n\r\n  once<K extends keyof RCEEventTypes>(\r\n    event: K,\r\n    listener: (arg: RCEEventTypes[K]) => void\r\n  ): this {\r\n    return super.once(event, listener);\r\n  }\r\n\r\n  off<K extends keyof RCEEventTypes>(\r\n    event: K,\r\n    listener: (arg: RCEEventTypes[K]) => void\r\n  ): this {\r\n    return super.off(event, listener);\r\n  }\r\n}\r\n\r\nexport default class RCEManager {\r\n  private _auth: GPortalAuth;\r\n  private _socket: GPortalSocket;\r\n  private _plugins: Map<string, any> = new Map();\r\n  public logger: ILogger;\r\n  public events: RCEEventManager = new RCEEventManager();\r\n  public servers: ServerManager;\r\n\r\n  public constructor() {\r\n    this.events.on(RCEEvent.Error, (payload) => {\r\n      if (payload.server) {\r\n        this.logger.error(`[${payload.server.identifier}] ${payload.error}`);\r\n      } else {\r\n        this.logger.error(payload.error);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param auth {AuthOptions} - The authentication options for the GPortal API\r\n   * @returns {Promise<void>}\r\n   *\r\n   * @example\r\n   * ```js\r\n   * const rce = new RCEManager();\r\n   * await rce.init({\r\n   *  username: \"username\",\r\n   *  password: \"password\"\r\n   * });\r\n   * ```\r\n   *\r\n   * @example\r\n   * ```js\r\n   * const rce = new RCEManager();\r\n   * await rce.init({\r\n   *  username: \"username\",\r\n   *  password: \"password\"\r\n   * }, {\r\n   *  level: LogLevel.Info,\r\n   *  file: \"rce.log\"\r\n   * });\r\n   */\r\n  public async init(auth: AuthOptions, logger: LoggerOptions) {\r\n    this.logger =\r\n      logger?.instance || new RCELogger(logger?.level, logger?.file);\r\n\r\n    this._auth = new GPortalAuth(this);\r\n    await this._auth.login(auth.username, auth.password);\r\n\r\n    this._socket = new GPortalSocket(this, this._auth);\r\n    this._socket.connect();\r\n\r\n    this.servers = new ServerManager(this, this._auth, this._socket);\r\n  }\r\n\r\n  /**\r\n   * Gracefully close the RCE Manager\r\n   * @returns {void}\r\n   *\r\n   * @example\r\n   * ```js\r\n   * const rce = new RCEManager();\r\n   * rce.destroy();\r\n   * ```\r\n   */\r\n  public destroy() {\r\n    this._socket.close();\r\n    this.servers.removeAll();\r\n    this._auth.destroy();\r\n    CommandHandler.destroy();\r\n\r\n    this.logger.info(\"RCE.JS - Closed Gracefully\");\r\n  }\r\n\r\n  /**\r\n   * Register a plugin with the RCE Manager\r\n   * @param name {string} - The name of the plugin\r\n   * @param instance {any} - The instance of the plugin\r\n   * @returns {void}\r\n   *\r\n   * @example\r\n   * ```js\r\n   * const rce = new RCEManager();\r\n   * rce.registerPlugin(\"myPlugin\", new MyPlugin());\r\n   * ```\r\n   */\r\n  public registerPlugin(name: string, instance: any) {\r\n    if (this._plugins.has(name)) {\r\n      return this.logger.warn(`Plugin Is Already Registered: ${name}`);\r\n    }\r\n\r\n    this._plugins.set(name, instance);\r\n    if (typeof instance.init === \"function\") {\r\n      instance.init(this);\r\n    }\r\n\r\n    this.logger.info(`Plugin Registered: ${name}`);\r\n  }\r\n\r\n  /**\r\n   * Get a registered plugin\r\n   * @param name {string} - The name of the plugin\r\n   * @returns {any}\r\n   *\r\n   * @example\r\n   * ```js\r\n   * const rce = new RCEManager();\r\n   * const myPlugin = rce.getPlugin(\"myPlugin\");\r\n   * ```\r\n   */\r\n  public getPlugin(name: string): any {\r\n    return this._plugins.get(name);\r\n  }\r\n}\r\n"]}